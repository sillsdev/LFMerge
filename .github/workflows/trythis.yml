name: version-numbers-test

on:
  push:
    branches: [ chore/version-numbers-from-gha ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    # As of 2021-11-24, we build LfMerge for LCM DB versions 68-72 (and there is no 71)
    strategy:
      matrix:
        dbversion: [7000072]
        distro: [ 'bionic' ]

    steps:
      - name: Dump GitHub context for testing
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Check out current branch
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # All history for all tags and branches, since GitVersion needs that

      - name: Run git-describe
        id: describe
        run: git describe --long

      - name: Run git-describe including branches
        id: describe_all
        run: git describe --all

      - name: Calculate version for tags
        id: tag_version
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TAGNAME: ${{ github.ref }}
        run: echo "::set-output name=version::$(echo ${TAGNAME} | sed 's/^refs\/tags\///')"

      - name: Calculate version for branches
        id: branch_version
        if: startsWith(github.ref, 'refs/heads/')
        env:
          TAGNAME: ${{ github.ref }}
        run: echo "::set-output name=version::$(echo ${TAGNAME} | sed 's/^refs\/heads\///')"

      - name: Calculate version for PRs
        id: pr_version
        if: startsWith(github.ref, 'refs/pull/')
        env:
          TAGNAME: ${{ github.ref }}
        run: echo "::set-output name=version::$(echo ${TAGNAME} | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')"

      - name: Get output version
        env:
          VERSION: ${{ steps.tag_version.outputs.version || steps.branch_version.outputs.version || steps.pr_version.outputs.version || 'no version found' }}
        run: echo "Version calculated as ${VERSION}"

      - name: Calculate version in one step
        env:
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          echo Start
          REV=${GITHUB_REF:-$(git rev-parse --symbolic-full-name HEAD)}
          DESCRIBE=$(git describe --long --match "v*")
          MAJOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1/')
          MINOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\2/')
          PATCH=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\3/')
          COMMIT_COUNT=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
          COMMIT_HASH=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-[^-]+-g(.*)$/\1/')
          echo "Calculating name from ${REV}"
          if [ -z ${REV} ]; then
            echo Failed to get a meaningful commit name
          fi
          echo Got commit name ${REV}
          RESULT=notfound
          if echo "${REV}" | grep -E '^refs/pull/'; then
            echo Found PR
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
          fi
          if echo "${REV}" | grep -E '^refs/heads/'; then
            echo Found branch
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/heads\///')
          fi
          if echo "${REV}" | grep -E '^refs/tags/'; then
            echo Found tag
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/tags\///')
          fi
          echo Will calculate version from "${RESULT}" and "${MAJOR}.${MINOR}.${PATCH} with $COMMIT_COUNT commits since then, and current hash $COMMIT_HASH"

          case "$REV" in
            refs/heads/master | refs/heads/fieldworks8-master)
              echo Found master
              PRERELEASE="~alpha.${BUILD_NUMBER}"
              ;;

            refs/heads/qa | refs/heads/fieldworks8-qa)
              echo Found qa
              PRERELEASE="~beta.${BUILD_NUMBER}"
              ;;

            refs/heads/live | refs/heads/fieldworks8-live)
              echo Found live
              PRERELEASE=
              PATCH=$((${PATCH} + 1))
              # TODO: Detect need for minor/major updates and increment those instead of PATCH
              ;;

            refs/heads/chore/version-numbers-from-gha)
              echo Found specific version number branch
              PRERELEASE="~${REV##refs/heads/}.${BUILD_NUMBER}"
              # For testing
              ;;

            refs/pull/*)
              echo Found PR
              PR_NUMBER=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
              PRERELEASE="~PR${PR_NUMBER}.${BUILD_NUMBER}"
              ;;

            refs/heads/*)
              echo Found branch
              PRERELEASE="~${REV##refs/heads/}.${BUILD_NUMBER}"
              ;;

          esac
          echo Prelease would be ${PRERELEASE}
          PackageVersion=${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}
          echo Package version would be ${PackageVersion}
