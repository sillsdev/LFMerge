name: docker-build

on:
  push:
    branches: [ master, qa, live, fieldworks8-master, fieldworks8-qa, fieldworks8-live ]
  pull_request:
    branches: [ master, fieldworks8-master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # As of 2021-11-24, we build LfMerge for LCM DB versions 68-72 (and there is no 71)
    strategy:
      matrix:
        dbversion: [7000068, 7000069, 7000070, 7000072]
        distro: [ 'bionic' ]

    steps:
      - name: Decide if this build configuration should run
        id: should_run
        run: true
        if: ${{ (github.event_name == 'push' && !startsWith(github.ref_name, 'fieldworks8-')) || (github.event_name == 'push' && startsWith(github.ref_name, 'fieldworks8-') && matrix.dbversion < 7000072) || (github.event_name == 'pull_request' && startsWith(github.base_ref, 'fieldworks8-') && matrix.dbversion < 7000072) || (github.event_name == 'pull_request' && !startsWith(github.base_ref, 'fieldworks8-') && matrix.dbversion >= 7000072) }}

      - name: Check out current branch
        # actions/checkout@v2.0.10 is commit ec3a7ce113134d7a93b817d10a8272cb61118579
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        if: steps.should_run.outcome == 'success'
        with:
          fetch-depth: 0  # All history for all tags and branches, since GitVersion needs that

      - name: Check out FW8 branch
        # actions/checkout@v2.0.10 is commit ec3a7ce113134d7a93b817d10a8272cb61118579
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        if: github.event_name == 'push' && !startsWith(github.ref_name, 'fieldworks8-') && matrix.dbversion < 7000072 && steps.should_run.outcome == 'success'
        with:
          ref: fieldworks8-${{ github.ref_name }}
          fetch-depth: 0  # All history for all tags and branches, since GitVersion needs that

      - name: Verify current branch
        run: git branch --contains HEAD --format '%(refname)'
        if: steps.should_run.outcome == 'success'

      - name: Calculate version number
        id: version
        if: steps.should_run.outcome == 'success'
        env:
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          echo Start
          REV=${GITHUB_REF:-$(git rev-parse --symbolic-full-name HEAD)}
          DESCRIBE=$(git describe --long --match "v*")
          MAJOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1/')
          MINOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\2/')
          PATCH=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\3/')
          # TODO: Detect need for minor/major updates and increment those instead of PATCH
          COMMIT_COUNT=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
          COMMIT_HASH=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-[^-]+-g(.*)$/\1/')
          if [ -n "$COMMIT_COUNT" -a "$COMMIT_COUNT" -gt 0 ]; then
            # If we're building from a tagged version, rebuild precisely that version
            PATCH=$((${PATCH} + 1))
          fi
          MajorMinorPatch="${MAJOR}.${MINOR}.${PATCH}"
          AssemblySemVer="${MajorMinorPatch}.${BUILD_NUMBER}"
          AssemblySemFileVer="${MajorMinorPatch}.0"
          InformationalVersion="${DESCRIBE}"
          echo "Calculating name from ${REV}"
          if [ -z ${REV} ]; then
            echo Failed to get a meaningful commit name
          fi
          echo Got commit name ${REV}
          RESULT=notfound
          if echo "${REV}" | grep -E '^refs/pull/'; then
            echo Found PR
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
          fi
          if echo "${REV}" | grep -E '^refs/heads/'; then
            echo Found branch
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/heads\///')
          fi
          if echo "${REV}" | grep -E '^refs/tags/'; then
            echo Found tag
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/tags\///')
          fi
          echo Will calculate version from "${RESULT}" and "${MAJOR}.${MINOR}.${PATCH} with $COMMIT_COUNT commits since then, and current hash $COMMIT_HASH"

          case "$REV" in
            refs/heads/master | refs/heads/fieldworks8-master)
              PRERELEASE="~alpha.${BUILD_NUMBER}"
              ;;

            refs/heads/qa | refs/heads/fieldworks8-qa)
              PRERELEASE="~beta.${BUILD_NUMBER}"
              ;;

            refs/heads/live | refs/heads/fieldworks8-live)
              PRERELEASE=
              ;;

            refs/pull/*)
              PR_NUMBER=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
              PRERELEASE="~PR${PR_NUMBER}.${BUILD_NUMBER}"
              ;;

            refs/heads/*)
              BRANCH=$(echo "${REV##refs/heads/}" | sed 's/\//-/')
              PRERELEASE="~${BRANCH}.${BUILD_NUMBER}"
              ;;

            *)
              echo "Could not determine version number from ${REV}"
              echo "::error ::Could not determine version number from ${REV}"
              exit 1

          esac
          DebPackageVersion=${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}
          MsBuildVersion=$(echo "${DebPackageVersion}" | sed 's/~/-/')
          echo "Will build package version ${DebPackageVersion}"
          echo "::set-output name=DebPackageVersion::${DebPackageVersion}"
          echo "::set-output name=MsBuildVersion::${MsBuildVersion}"
          echo "::set-output name=MajorMinorPatch::${MajorMinorPatch}"
          echo "::set-output name=AssemblySemVer::${AssemblySemVer}"
          echo "::set-output name=AssemblySemFileVer::${AssemblySemFileVer}"
          echo "::set-output name=InformationalVersion::${InformationalVersion}"

      - name: Set up buildx for Docker
        # docker/setup-buildx-action@v1.6.0 is commit 94ab11c41e45d028884a99163086648e898eed25
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      - name: Build DBVersion-specific Docker image
        if: steps.should_run.outcome == 'success'
        # docker/build-push-action@v2.7.0 is commit a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
        uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
        with:
          push: false
          load: true
          tags: lfmerge-build-${{matrix.dbversion}}
          context: .
          file: Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DbVersion=${{matrix.dbversion}}

      - name: Run docker image ls to verify build
        if: steps.should_run.outcome == 'success'
        run: docker image ls

      - name: Run the build container
        if: steps.should_run.outcome == 'success'
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          DebPackageVersion: ${{ steps.version.outputs.DebPackageVersion }}
          MsBuildVersion: ${{ steps.version.outputs.MsBuildVersion }}
          MajorMinorPatch: ${{ steps.version.outputs.MajorMinorPatch }}
          AssemblySemVer: ${{ steps.version.outputs.AssemblySemVer }}
          AssemblySemFileVer: ${{ steps.version.outputs.AssemblySemFileVer }}
          InformationalVersion: ${{ steps.version.outputs.InformationalVersion }}
        run: docker run --mount type=bind,source="$(pwd)",target=/home/builder/repo --env "BUILD_NUMBER=${BUILD_NUMBER}" --env "DebPackageVersion=${DebPackageVersion}" --env "Version=${MsBuildVersion}" --env "MajorMinorPatch=${MajorMinorPatch}" --env "AssemblyVersion=${AssemblySemVer}" --env "FileVersion=${AssemblySemFileVer}" --env "InformationalVersion=${InformationalVersion}" --name tmp-lfmerge-build-${{matrix.dbversion}} lfmerge-build-${{matrix.dbversion}}

    - name: Collect tarball images
    # Now should collect tarballs
      if: steps.should_run.outcome == 'success'
      run: docker container cp tmp-lfmerge-build-${{matrix.dbversion}}:/home/builder/repo/tarball ./

    # actions/upload-artifact@v2.2.4 is commit 27121b0bdffd731efa15d66772be8dc71245d074
    - uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074
      if: steps.should_run.outcome == 'success'
      with:
        name: lfmerge-tarball
        path: tarball

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/live' || github.ref == 'refs/heads/fieldworks8-live')
    steps:
    # actions/checkout@v2.0.10 is commit ec3a7ce113134d7a93b817d10a8272cb61118579
    - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
      with:
        fetch-depth: 0

    - name: Download build artifacts
      if: github.ref == 'refs/heads/live'
      # actions/download-artifact@v2.0.10 is commit 3be87be14a055c47b01d3bd88f8fe02320a9bb60
      uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
      with:
        name: lfmerge-tarball
        path: tarball

    - name: Build final Docker image
      id: lfmerge_image
      if: steps.should_run.outcome == 'success'
      # docker/build-push-action@v2.7.0 is commit a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
      uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
      # TODO: Follow https://github.com/docker/build-push-action/blob/master/docs/advanced/tags-labels.md for tagging
      with:
        push: false
        load: true
        tags: sillsdev/lfmerge:${{ steps.version.outputs.MsBuildVersion }}
        context: .
        file: Dockerfile.finalresult
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Show metadata from LfMerge image build step
      run: echo "$METADATA"
      env:
        METADATA: ${{ steps.lfmerge_image.output.metadata }}
      if: steps.should_run.outcome == 'success'

    - name: List Docker images to verify build
      if: steps.should_run.outcome == 'success'
      run: docker image ls
