name: docker-build

on:
  push:
    branches: [ master, qa, live, fieldworks8-master, fieldworks8-qa, fieldworks8-live ]
  pull_request:
    branches: [ master, fieldworks8-master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # As of 2021-11-24, we build LfMerge for LCM DB versions 68-72 (and there is no 71)
    strategy:
      matrix:
        dbversion: [7000068, 7000069, 7000070, 7000072]
        distro: [ 'bionic' ]

    steps:
      - name: Decide if this build configuration should run
        id: should_run
        run: true
        if: ${{ (github.event_name == 'push' && !startsWith(github.ref_name, 'fieldworks8-')) || (github.event_name == 'push' && startsWith(github.ref_name, 'fieldworks8-') && matrix.dbversion < 7000072) || (github.event_name == 'pull_request' && startsWith(github.base_ref, 'fieldworks8-') && matrix.dbversion < 7000072) || (github.event_name == 'pull_request' && !startsWith(github.base_ref, 'fieldworks8-') && matrix.dbversion >= 7000072) }}

      - name: Check out current branch
        uses: actions/checkout@v2
        if: steps.should_run.outcome == 'success'
        with:
          fetch-depth: 0  # All history for all tags and branches, since GitVersion needs that

      - name: Check out FW8 branch
        uses: actions/checkout@v2
        if: github.event_name == 'push' && !startsWith(github.ref_name, 'fieldworks8-') && matrix.dbversion < 7000072 && steps.should_run.outcome == 'success'
        with:
          ref: fieldworks8-${{ github.ref_name }}
          fetch-depth: 0  # All history for all tags and branches, since GitVersion needs that

      - name: Verify current branch
        run: git branch --contains HEAD --format '%(refname)'
        if: steps.should_run.outcome == 'success'

      - name: Calculate version number
        id: version
        if: steps.should_run.outcome == 'success'
        env:
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          echo Start
          REV=${GITHUB_REF:-$(git rev-parse --symbolic-full-name HEAD)}
          DESCRIBE=$(git describe --long --match "v*")
          MAJOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\1/')
          MINOR=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\2/')
          PATCH=$(echo "$DESCRIBE" | sed -E 's/^v([0-9]+)\.([0-9]+)\.([0-9]+).*$/\3/')
          # TODO: Detect need for minor/major updates and increment those instead of PATCH
          PATCH=$((${PATCH} + 1))
          COMMIT_COUNT=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-([^-]+)-.*$/\1/')
          COMMIT_HASH=$(echo "$DESCRIBE" | sed -E 's/^[^-]+-[^-]+-g(.*)$/\1/')
          MajorMinorPatch="${MAJOR}.${MINOR}.${PATCH}"
          AssemblySemVer="${MajorMinorPatch}.${BUILD_NUMBER}"
          AssemblySemFileVer="${MajorMinorPatch}.0"
          InformationalVersion="${DESCRIBE}"
          echo "Calculating name from ${REV}"
          if [ -z ${REV} ]; then
            echo Failed to get a meaningful commit name
          fi
          echo Got commit name ${REV}
          RESULT=notfound
          if echo "${REV}" | grep -E '^refs/pull/'; then
            echo Found PR
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
          fi
          if echo "${REV}" | grep -E '^refs/heads/'; then
            echo Found branch
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/heads\///')
          fi
          if echo "${REV}" | grep -E '^refs/tags/'; then
            echo Found tag
            RESULT=$(echo "${REV}" | sed -E 's/^refs\/tags\///')
          fi
          echo Will calculate version from "${RESULT}" and "${MAJOR}.${MINOR}.${PATCH} with $COMMIT_COUNT commits since then, and current hash $COMMIT_HASH"

          case "$REV" in
            refs/heads/master | refs/heads/fieldworks8-master)
              PRERELEASE="~alpha.${BUILD_NUMBER}"
              ;;

            refs/heads/qa | refs/heads/fieldworks8-qa)
              PRERELEASE="~beta.${BUILD_NUMBER}"
              ;;

            refs/heads/live | refs/heads/fieldworks8-live)
              PRERELEASE=
              ;;

            refs/pull/*)
              PR_NUMBER=$(echo "${REV}" | sed -E 's/^refs\/pull\/([0-9]+)\/merge/\1/')
              PRERELEASE="~PR${PR_NUMBER}.${BUILD_NUMBER}"
              ;;

            refs/heads/*)
              PRERELEASE="~${REV##refs/heads/}.${BUILD_NUMBER}"
              ;;

            *)
              echo "Could not determine version number from ${REV}"
              echo "::error ::Could not determine version number from ${REV}"
              exit 1

          esac
          DebPackageVersion=${MAJOR}.${MINOR}.${PATCH}${PRERELEASE}
          MsBuildVersion=$(echo "${DebPackageVersion}" | sed 's/~/-/')
          echo "Will build package version ${DebPackageVersion}"
          echo "::set-output name=DebPackageVersion::${DebPackageVersion}"
          echo "::set-output name=MsBuildVersion::${MsBuildVersion}"
          echo "::set-output name=MajorMinorPatch::${MajorMinorPatch}"
          echo "::set-output name=AssemblySemVer::${AssemblySemVer}"
          echo "::set-output name=AssemblySemFileVer::${AssemblySemFileVer}"
          echo "::set-output name=InformationalVersion::${InformationalVersion}"

      - name: Set up buildx for Docker
        uses: docker/setup-buildx-action@v1

      - name: Build DBVersion-specific Docker image
        if: steps.should_run.outcome == 'success'
        uses: docker/build-push-action@v2
        with:
          push: false
          load: true
          tags: lfmerge-build-${{matrix.dbversion}}
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DbVersion=${{matrix.dbversion}}

      - name: Run docker image ls to verify build
        if: steps.should_run.outcome == 'success'
        run: docker image ls

      - name: Run the build container
        if: steps.should_run.outcome == 'success'
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          DebPackageVersion: ${{ steps.version.outputs.DebPackageVersion }}
          MsBuildVersion: ${{ steps.version.outputs.MsBuildVersion }}
          MajorMinorPatch: ${{ steps.version.outputs.MajorMinorPatch }}
          AssemblySemVer: ${{ steps.version.outputs.AssemblySemVer }}
          AssemblySemFileVer: ${{ steps.version.outputs.AssemblySemFileVer }}
          InformationalVersion: ${{ steps.version.outputs.InformationalVersion }}
        run: docker run --env "BUILD_NUMBER=${BUILD_NUMBER}" --env "DebPackageVersion=${DebPackageVersion}" --env "Version=${MsBuildVersion}" --env "MajorMinorPatch=${MajorMinorPatch}" --env "AssemblyVersion=${AssemblySemVer}" --env "FileVersion=${AssemblySemFileVer}" --env "InformationalVersion=${InformationalVersion}" --name tmp-lfmerge-build-${{matrix.dbversion}} lfmerge-build-${{matrix.dbversion}}

      - name: Collect Debian images
        if: steps.should_run.outcome == 'success'
        run: docker container cp tmp-lfmerge-build-${{matrix.dbversion}}:/home/builder/packages/lfmerge/finalresults ./

      - uses: actions/upload-artifact@v2
        if: steps.should_run.outcome == 'success'
        with:
          name: lfmerge-deb-files
          path: finalresults/lfmerge*deb

    outputs:
      MajorMinorPatch: ${{ steps.version.outputs.MajorMinorPatch }}

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/live'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Ensure release number exists
      # Will throw an error, thereby cancelling the build, if MajorMinorPatch output was empty
      env:
        MajorMinorPatch: ${{needs.build.outputs.MajorMinorPatch}}
      run: test -n "${MajorMinorPatch}" && echo "Producing release ${MajorMinorPatch}"

    - name: Tag new release
      env:
        MajorMinorPatch: ${{needs.build.outputs.MajorMinorPatch}}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a -m "Release v${MajorMinorPatch}" "v${MajorMinorPatch}"
        git push --tags

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: lfmerge-deb-files
        path: release

    - name: Create GitHub release
      env:
        MajorMinorPatch: ${{needs.build.outputs.MajorMinorPatch}}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{needs.build.outputs.MajorMinorPatch}}
        files: release/*.deb
        body: |
          # LfMerge v${{needs.build.outputs.MajorMinorPatch}}

          First release via GitHub Releases

          ## To install

          Download all the .deb files, then make sure the `gdebi-core` package is installed. Then run `gdebi lfmerge*.deb`.

