{
	// Use IntelliSense to learn about possible attributes.
	// Hover to view descriptions of existing attributes.
	// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
	"version": "0.2.0",
	"configurations": [

		/*
		This is a way to enable unmanaged debugging of unit tests with GDB. Since the tests
		that you may want to debug vary I leave it commented out. It is advisable to
		build mono locally so that all debug information is available. Mine sits in
		/opt/mono5-dbg.
		This configuration requires the `webfreak.debug` extension.
		{
			"type": "gdb",
			"request": "launch",
			"name": "GDB debug tests",
			"target": "/opt/mono5-dbg/bin/mono-sgen",
			"cwd": "${workspaceRoot}/output/Debug",
			"arguments": " --debug ${workspaceRoot}/packages/NUnit.Runners.Net4.2.6.4/tools/nunit-console.exe -run=SIL.FieldWorks.Common.Widgets.FwListBoxTests.Add_EmptyObjectCollection_CollectionContainsSingleElement WidgetsTests.dll",
			"env": {
				"DISPLAY": ":0",
				"GDK_SHARP": "/usr/lib/cli/gdk-sharp-2.0/",
				"PATH": "/opt/mono5-dbg/bin:/opt/mono5-sil/bin:${workspaceRoot}/Output_x86_64/Debug:/usr/lib/fieldworks/icu-bin:${workspaceRoot}/../libcom/COM/buildx86_64/bin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
				"LD_LIBRARY_PATH": "/opt/mono5-dbg/lib:/opt/mono5-sil/lib:/usr/lib/fieldworks:${workspaceRoot}/Output_x86_64/Debug:/usr/lib/fieldworks/lib:${workspaceRoot}/../libcom/COM/buildx86_64/lib:${workspaceRoot}/Output_x86_64/Debug/Firefox-Linux64:/usr/lib",
				"FW_ROOT": "${workspaceRoot}/DistFiles",
				"FW_ROOTCODE": "${workspaceRoot}/DistFiles",
				"FW_ROOTDATA": "${workspaceRoot}/DistFiles",
				"FW_CommonAppData": "${workspaceRoot}/Output_x86_64/VarLibFieldworks",
				"MONO_REGISTRY_PATH": "${workspaceRoot}/Output_x86_64/registry",
				"MONO_GAC_PREFIX": "/opt/mono5-dbg:/opt/mono5-sil:/usr/lib/fieldworks:/usr",
				"MONO_PATH": "${workspaceRoot}/DistFiles:${workspaceRoot}/Output_x86_64/Debug:/usr/lib/cli/gdk-sharp-2.0/:/usr/lib/fieldworks",
				"MONO_TRACE_LISTENER": "Console.Out"
			}
		},
		*/
    {
      // Use IntelliSense to find out which attributes exist for C# debugging
      // Use hover for the description of the existing attributes
      // For further information visit https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger-launchjson.md
      "name": ".NET Core Launch (console)",
      "type": "coreclr",
      "request": "launch",
      "preLaunchTask": "build",
      "program": "${workspaceFolder}/tarball/lfmerge-7000072/usr/lib/lfmerge/7000072/LfMergeQueueManager.dll",
      "args": [],
			"justMyCode": false,
			// These options find most of the symbols but maybe could be tweaked to find the rest
			"symbolOptions": {
				"searchPaths": [
					"http://msdl.microsoft.com/download/symbols"
				],
				"searchMicrosoftSymbolServer": false,
				"searchNuGetOrgSymbolServer": true
			},
      // For more information about the 'console' field, see https://aka.ms/VSCode-CS-LaunchJson-Console
      "console": "internalConsole",
      "stopAtEntry": false
    },
    {
      "name": ".NET Core Attach",
      "type": "coreclr",
      "request": "attach"
		},
    {
      "name": "Docker Attach",
      "type": "coreclr",
      "request": "attach",
      "processId": "${command:pickRemoteProcess}",
      "justMyCode": false,
      "requireExactSource": false,
      // "symbolOptions": {
      //   "searchPaths": [  ],
      //   "searchMicrosoftSymbolServer": false,
      //   "searchNuGetOrgSymbolServer": false,
			// 	"moduleFilter": {
			// 		"mode": "loadOnlyIncluded",
			// 		"includedModules": [
			// 			"LfMerge*.dll",
			// 			"SIL*.dll",
			// 		]
			// 	}
      // },
      "pipeTransport": {
        "pipeProgram": "docker",
        "pipeArgs": [
          "exec",
          "-i",
          "lfmerge"
        ],
        "debuggerPath": "/vsdbg/vsdbg",
        "pipeCwd": "${workspaceRoot}",
        "quoteArgs": false
      },
    }
	]
}