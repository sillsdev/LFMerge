<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTarget="Test">
	<PropertyGroup>
		<RootDir Condition="'$(RootDir)'==''">$(MSBuildProjectDirectory)/..</RootDir>
		<Solution>LfMerge.sln</Solution>
		<SolutionPath>$(RootDir)/$(Solution)</SolutionPath>
		<RestorePackagesPath>$(RootDir)/packages</RestorePackagesPath>
		<ApplicationName>LfMerge</ApplicationName>
		<ApplicationNameLC>lfmerge</ApplicationNameLC>
		<Configuration Condition="'$(Configuration)'==''">Release</Configuration>
		<useNUnit-x86 Condition="'$(OS)'=='Windows_NT'">true</useNUnit-x86>
		<useNUnit-x86 Condition="'$(OS)'!='Windows_NT'">false</useNUnit-x86>
		<NUnitVersion>2.6.4</NUnitVersion>
		<RestartBuild Condition="!Exists('$(RootDir)/packages/MSBuildTasks/tools/MSBuild.Community.Tasks.dll') Or !Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') Or !Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe')">true</RestartBuild>
		<RestartBuild Condition="Exists('$(RootDir)/packages/MSBuildTasks/tools/MSBuild.Community.Tasks.dll') And Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll') And Exists('$(RootDir)/packages/NUnit.ConsoleRunner/tools/nunit3-console.exe')">false</RestartBuild>
		<TestOutputXmlFile Condition="'$(teamcity_version)' == ''">$(RootDir)/output/$(Configuration)/TestResults.xml</TestOutputXmlFile>
	</PropertyGroup>

	<UsingTask TaskName="FileUpdate"
		AssemblyFile="$(RootDir)/packages/MSBuildTasks/tools/MSBuild.Community.Tasks.dll"
		Condition="Exists('$(RootDir)/packages/MSBuildTasks/tools/MSBuild.Community.Tasks.dll')" />
	<UsingTask TaskName="NUnit3"
		AssemblyFile="$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll"
		Condition="Exists('$(RootDir)/packages/SIL.BuildTasks/tools/SIL.BuildTasks.dll')" />

	<Import Project="NuGet.targets"/>

	<Target Name="Build">
		<CallTarget Targets="RestoreBuildTasks" />
		<CallTarget Targets="BuildInternal" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="BuildInternal"
			Properties="Configuration=$(Configuration);RootDir=$(RootDir)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="BuildInternal">
		<Message Text="RestartBuild=$(RestartBuild); $(RootDir)/packages/MSBuildTasks/tools/MSBuild.Community.Tasks.dll" />
		<Message Text="Exists($(RootDir)/packages/MSBuildTasks/tools/MSBuild.Community.Tasks.dll)" Condition="Exists('$(RootDir)/packages/MSBuildTasks/tools/MSBuild.Community.Tasks.dll')"/>
		<CallTarget Targets="Clean"/>
		<CallTarget Targets="Compile"/>
		<Message Text="Build Complete"/>
	</Target>

	<ItemGroup>
		<PackageDirs Include="$([System.IO.Directory]::GetDirectories(&quot;$(RootDir)/packages/&quot;, &quot;MSBuildTasks*&quot;, SearchOption.TopDirectoryOnly))" Condition="Exists('$(RootDir)/packages/')" />
		<PackageDirs Include="$([System.IO.Directory]::GetDirectories(&quot;$(RootDir)/packages/&quot;, &quot;SIL.BuildTasks*&quot;, SearchOption.TopDirectoryOnly))" Condition="Exists('$(RootDir)/packages/')" />
		<PackageDirs Include="$([System.IO.Directory]::GetDirectories(&quot;$(RootDir)/packages/&quot;, &quot;NUnit.*&quot;, SearchOption.TopDirectoryOnly))" Condition="Exists('$(RootDir)/packages/')" />
	</ItemGroup>

	<Target Name="RestoreBuildTasks" DependsOnTargets="CheckPrerequisites">
		<!-- first remove any existing packages - if they were installed with appended version numbers nuget refuses to install it again, messing up things -->
		<RemoveDir Directories="@(PackageDirs)" />
		<Exec Command='$(NuGetCommand) install MSBuildTasks -excludeVersion -version 1.5.0.235 -solutionDirectory "$(RootDir)"' />
		<Exec Command='$(NuGetCommand) install SIL.BuildTasks -excludeVersion -version 2.3.4 -solutionDirectory "$(RootDir)"' />
		<!-- Install NUnit.Console which has the required extensions as dependencies -->
		<Exec Command='$(NuGetCommand) install NUnit.Console -excludeVersion -version 3.11.1 -solutionDirectory "$(RootDir)"' />
	</Target>

	<ItemGroup>
		<ExistingObjectFiles
			Include="$(RootDir)/output/$(Configuration)/**/*"
			Exclude="$(RootDir)/.git/**/*"
		/>
	</ItemGroup>

	<Target Name="Clean">
		<Delete Files="@(ExistingObjectFiles)" />
		<Delete Condition="'$(OS)'=='Windows_NT' Or $(MSBuildToolsVersion) &gt;= 15"
			 Files="$(RootDir)/**/obj/**/*" />
		<Exec Condition="'$(OS)'!='Windows_NT' And $(MSBuildToolsVersion) &lt; 15"
			Command="find . %5c( -name obj -o -name bin -o -name test-results %5c) -type d -print0 | xargs -0 rm -rf"
			WorkingDirectory="$(RootDir)" />
	</Target>

	<Target Name="PrepareSource" DependsOnTargets="RestorePackages;RestoreBuildTasks">
		<!-- This target gets called before building the source package -->
		<RemoveDir Directories="$(RootDir)/Downloads"/>
	</Target>

	<Target Name="Compile" DependsOnTargets="RestorePackages">
		<Message Text="RootDir=$(RootDir)"/>
		<FileUpdate Files="$(RootDir)/Mercurial/mercurial.ini" Regex="fixutf8=../"
			ReplacementText="fixutf8=$(RootDir)/" ContinueOnError="WarnAndContinue"/>
		<CallTarget Targets="CompileOnly"/>
	</Target>

	<Target Name="CompileOnly">
		<!-- This target gets called during binary package build and shouldn't download
			anything -->
		<MSBuild
			Projects="$(SolutionPath)"
			Targets="Build"
			Properties="Configuration=$(Configuration)" />
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<Exec Command='bash -c "ln -sf ../Mercurial ."' WorkingDirectory="$(RootDir)/output"
			Condition="'$(OS)'=='Unix'"/>
		<CallTarget Targets="TestOnly" Condition="!$(RestartBuild)" />
		<MSBuild Projects="$(MSBuildProjectFullPath)" Targets="TestOnly"
			Properties="Configuration=$(Configuration);RootDir=$(RootDir)"
			Condition="$(RestartBuild)" />
	</Target>

	<Target Name="TestOnly">
		<ItemGroup>
			<TestAssemblies Include="$(RootDir)/output/$(Configuration)/net462/*.Tests.dll"
				Exclude="$(RootDir)/output/$(Configuration)/net462/SIL.LCModel*.Tests.dll"/>
		</ItemGroup>

		<NUnit3 Assemblies="@(TestAssemblies)"
			ToolPath="$(RootDir)/packages/NUnit.ConsoleRunner/tools"
			ExcludeCategory="$(excludedCategories)$(ExtraExcludeCategories)"
			WorkingDirectory="$(RootDir)/output/$(Configuration)/net462/"
			Force32Bit="$(useNUnit-x86)"
			Verbose="true"
			UseNUnit3Xml="true"
			OutputXmlFile="$(TestOutputXmlFile)"
			TeamCity="$(TeamCity)"/>
	</Target>

</Project>
